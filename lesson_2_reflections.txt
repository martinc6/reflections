Creating repositories allows me to maintain 'containers' of code.

For instance I can bundle together little projects, or even seperate features, which
then can be merged with a larger branch, or not.

IE: the bacon site could have been it's own repository, allowing Tom and I to both access the site, and work on whatever parts we need to.


How is the staging area different from the working directory and the repository? What value do you think it offers?

It seems that the staging area is mainly designed as a holding tank, to help keep track of moving parts, but before you're ready to commit.


How can you use the staging area to make sure you have one commit per logical change?

So it makes sense to work on things, one problem or task at a time.  I suppose once you finish something, add it to the staging area, then push the commit up, to save your work.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

So as we conduct tests for myBasget, we will need to try out different features to assess market demand.  Branches will be insanely easy to split something down the middle, test different ideas, then merge the winning one back into the master branch!


How do the diagrams help you visualize the branch structure?

It's easy to see how the branching system works within git.  I imagine I'll have some trouble at first when it comes to keeping track of branches.  I imagine in larger groups, there is a tendancy for 'branch-creep.' Interesting problem...


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches brings together any changes that were made seperately into one master document.  This is create, bc it allows people to work on features in parrallel and then bring it all together.